# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new pod to Amazon EKS, when there is a push to the "prod" branch.

name: Deploy to Amazon ECR

on:
  push:
    branches: ['prod']
    paths:
      - 'apps/link-cable/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: images
  EKS_DEPLOYMENT_NAME: swash-be

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to EKS.
          export IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Check if the image already exists in the ECR repository
          IMAGE_EXISTS=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION --output text || true)

          if [[ -z "$IMAGE_EXISTS" ]]; then
            docker compose build
            docker push $IMAGE_NAME
          fi
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Install and configure kubectl
        run: |
          curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-01-04/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/$EKS_DEPLOYMENT_NAME $EKS_DEPLOYMENT_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
